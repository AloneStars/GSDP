<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
		
		<!-- 配置c3p0连接池的私有属性 -->
		
		 <!--连接池中保留的最大连接数。默认值: 15 -->  
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>
		<!-- 连接池中保留的最小连接数，默认为：3-->  
		<property name="minPoolSize" value="${c3p0.minPoolSize}"/>
		<!-- 关闭连接后（把连接对象放入连接池中），不提交事务，默认也是false -->
		<property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"/>
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 --> 
		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}"/>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次    -->   
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>
	</bean>
	
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置mybatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 扫描entity包，并使用别名  com.gsdp.entity.* -> *
			 比如我们在用resultType的时候，我们就没有写类的全名，就只写了一个类名
		如果有多个包可以用;隔开 -->
		<property name="typeAliasesPackage" value="com.gsdp.entity"/>
		<!-- 扫描sql配置文件 -->
		<property name="mapperLocations" value="classpath:mapper/*Dao.xml"/>
	</bean>
	
	
	<!-- 配置扫描dao接口包，目的是动态实现dao接口，并把其注入到Spring容器中，相当于我们在写代码的getMapper，最后返回的是一个代理类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<!-- 由于MapperScannerConfigurer要先于PropertyPlaceholderConfigurer初始化,
		所以在这里我们使用了后处理的方式，这样就可以防止我们的一些数据库静态属性还没有替换就已经初始化我们的sqlSessionFactory了 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<!-- 给出需要扫描的Dao接口包 -->
		<property name="basePackage" value="com.gsdp.dao"/>
	</bean>
	
</beans>
